CREATE DATABASE kodilla_course;

show DATABASES;

create user 'kodilla_user' identified with MYSQL_NATIVE_PASSWORD by 'kodilla_Pass123';

GRANT ALL PRIVILEGES ON kodilla_course.* to kodilla_user;

show TABLES;

CREATE TABLE USERS
(
    ID SERIAL PRIMARY KEY,
    FIRSTNAME VARCHAR(100),
    LASTNAME VARCHAR(100)
);

CREATE TABLE POSTS
(
    ID SERIAL PRIMARY KEY,
    USER_ID BIGINT UNSIGNED NOT NULL,
    BODY VARCHAR(1024),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

SELECT * FROM USERS;

INSERT INTO USERS (FIRSTNAME, LASTNAME) VALUES ('John', 'Smith');

COMMIT;

INSERT INTO POSTS (USER_ID, BODY)
VALUES (1, 'This is my first post on this forum!');

COMMIT;

SELECT * FROM POSTS;

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('Zachary', 'Lee');

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('Stephanie', 'Kovalsky');

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('Thomas', 'Landgren');

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('John', 'Thomson');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (2, 'This is my first post too!');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (2, 'How are you?');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (1, 'Quite good, thanks bro!');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (4, 'Yo all! Here is Thomas!');

COMMIT;

SELECT * FROM USERS;
SELECT * FROM POSTS;


CREATE TABLE ISSUESLISTS
(
    ID SERIAL PRIMARY KEY unique,
    NAME VARCHAR(20)
);

CREATE TABLE ISSUES
(
    ID SERIAL PRIMARY KEY,
    ISSUESLIST_ID BIGINT UNSIGNED NOT NULL,
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED not null,
    SUMMARY VARCHAR(200),
    DESCRIPTION VARCHAR(200),
    FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS(ID),
    FOREIGN KEY (iSSUESLIST_ID) REFERENCES ISSUESLISTS(ID)
);

INSERT INTO ISSUESLISTS (NAME) VALUES ('ToDo');
INSERT INTO ISSUESLISTS (NAME) VALUES ('InProgress');
INSERT INTO ISSUESLISTS (NAME) VALUES ('Done');

INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (1, 2, 'Work1');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (1, 3, 'Work2');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (1, 1, 'Work3');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (1, 4, 'Work4');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (1, 5, 'Work5');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (2, 1, 'Work6');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (2, 2, 'Work7');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (2, 5, 'Work8');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (2, 2, 'Work9');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (2, 4, 'Work10');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (3, 3, 'Work11');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (3, 1, 'Work12');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (3, 2, 'Work13');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (3, 5, 'Work14');
INSERT INTO ISSUES (ISSUESLIST_ID, USER_ID_ASSIGNEDTO, SUMMARY)
VALUES (3, 1, 'Work15');

COMMIT;
SELECT * FROM ISSUES;
SELECT * FROM ISSUESLISTS;

SELECT ID, LASTNAME FROM USERS;

SELECT ID, FIRSTNAME FROM USERS
WHERE (ID >= 4 AND ID <= 10)
   OR ID = 1;

SELECT COUNT(*) FROM USERS;

SELECT MIN(ID), MAX(ID) FROM USERS;

SELECT SUM(ID), AVG(ID) FROM USERS;

SELECT SUM(ID) AS TOTAL, AVG(ID) AS AVERAGE FROM USERS;

SELECT U.FIRSTNAME, U.LASTNAME, P.BODY
FROM USERS U
JOIN POSTS P ON U.ID = P.USER_ID;

SELECT USER_ID, COUNT(*) AS POSTS_NUMBER
FROM POSTS
GROUP BY USER_ID
HAVING COUNT(*) > 1;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS POSTS_NUMBER
FROM USERS U JOIN POSTS P ON U.ID = P.USER_ID
GROUP BY P.USER_ID
HAVING COUNT(*) > 1;

SELECT IL.NAME, I.SUMMARY
FROM ISSUESLISTS IL
JOIN ISSUES I ON IL.ID = I.ISSUESLIST_ID;

SELECT U.FIRSTNAME, U.LASTNAME, I.SUMMARY
FROM USERS U
JOIN ISSUES I ON U.ID = I.USER_ID_ASSIGNEDTO;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS WORK_NUMBER
FROM USERS U JOIN ISSUES I ON I.USER_ID_ASSIGNEDTO = u.ID
GROUP BY I.USER_ID_ASSIGNEDTO
HAVING COUNT(*) > 1;